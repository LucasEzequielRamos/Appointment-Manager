generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Availability types

model DayAvailability {
  id         Int       @id @default(autoincrement())
  day        WeekDay
  time_slot  TimeSlot? @relation("DayAvailabilityToTimeSlot")
  service    Service   @relation(fields: [service_id], references: [id], onDelete: Cascade)
  service_id Int
}

model TimeSlot {
  id                Int             @id @default(autoincrement())
  start_time        String
  end_time          String
  dayAvailability   DayAvailability @relation("DayAvailabilityToTimeSlot", fields: [id], references: [id], onDelete: Cascade)
}

enum WeekDay {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
}

// Models

model User {
  user_id       Int       @id @default(autoincrement())
  first_name    String?   @db.VarChar(255)
  last_name     String?   @db.VarChar(255)
  email         String    @unique @db.VarChar(255)
  emailVerified DateTime?
  role          Role      @default(CLIENT)
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @updatedAt

  client       ClientProfile?
  professional ProfessionalProfile?

  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
}

enum Role {
  CLIENT
  PROFESSIONAL
  ADMIN
}

// Specific to client
model ClientProfile {
  client_id          Int           @unique
  address            String        @db.VarChar(255)
  phone              String        @db.VarChar(255)
  coverage           String
  user               User          @relation(fields: [client_id], references: [user_id], onDelete: Cascade)
  clientAppointments Appointment[] @relation("ClientAppointments")
}

// Specific to professional
model ProfessionalProfile {
  professional_id          Int           @unique
  user                     User          @relation(fields: [professional_id], references: [user_id], onDelete: Cascade)
  services                 Service[]
  professionalAppointments Appointment[] @relation("ProfessionalAppointments")
}

model Service {
  id              Int                 @id @default(autoincrement())
  name            String              @unique @db.VarChar(255)
  availability    DayAvailability[]
  duration        String              @db.VarChar(255)
  coverage        String?             @db.VarChar(255)
  appointments    Appointment[]
  professional_id Int
  professional    ProfessionalProfile @relation(fields: [professional_id], references: [professional_id], onDelete: Cascade)
}

model Appointment {
  id               Int       @id @default(autoincrement())
  created_at       DateTime  @default(now()) @db.Timestamp(0)
  delivered_at     DateTime? @db.Timestamp(0)
  appointment_date DateTime  @db.Timestamp(0)
  coverage         String?   @db.VarChar(255)
  available        Boolean   @default(true)
  cancelled        Boolean   @default(false)
  cancelled_reason String?

  service_id Int
  service    Service @relation(fields: [service_id], references: [id], onDelete: Cascade)

  client_id Int?
  client    ClientProfile? @relation("ClientAppointments", fields: [client_id], references: [client_id], onDelete: Cascade)

  professional_id Int
  professional    ProfessionalProfile @relation("ProfessionalAppointments", fields: [professional_id], references: [professional_id], onDelete: Cascade)
}

model Account {
  user_id           Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @id @unique
  user_id      Int
  expires      DateTime
  user         User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  user_id              Int
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@id([user_id, credentialID])
}
